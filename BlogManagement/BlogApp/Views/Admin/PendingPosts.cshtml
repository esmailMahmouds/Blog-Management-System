@model IEnumerable<BlogApp.Models.DomainClasses.Post>
@{
    ViewData["Title"] = "Pending Posts";
    Layout = "_Layout";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1><i class="fas fa-clock"></i> Pending Posts</h1>
        <a asp-action="Dashboard" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">
            <i class="fas fa-info-circle"></i>
            <h4>No Pending Posts</h4>
            <p>All posts have been reviewed. Great job!</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var post in Model)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-header bg-warning text-dark">
                            <div class="d-flex justify-content-between align-items-center">
                                <small><i class="fas fa-user"></i> @post.User.Name</small>
                                <span class="badge badge-warning">@post.Status</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-truncate" title="@post.Title">@post.Title</h5>
                            <p class="text-muted mb-2">
                                <i class="fas fa-tag"></i> @post.Category.Name
                            </p>
                            <p class="card-text" style="height: 60px; overflow: hidden;">
                                @(post.Content.Length > 100 ? post.Content.Substring(0, 100) + "..." : post.Content)
                            </p>
                            <small class="text-muted">
                                <i class="fas fa-calendar"></i> @post.CreateDate.ToString("MMM dd, yyyy")
                            </small>
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="btn-group w-100" role="group">
                                <button type="button" class="btn btn-success btn-sm" onclick="approvePost(@post.Id)">
                                    <i class="fas fa-check"></i> Approve
                                </button>
                                <button type="button" class="btn btn-danger btn-sm" onclick="rejectPost(@post.Id)">
                                    <i class="fas fa-times"></i> Reject
                                </button>
                                <a asp-controller="HomePage" asp-action="ViewPost" asp-route-id="@post.Id" 
                                   class="btn btn-info btn-sm" target="_blank">
                                    <i class="fas fa-eye"></i> View
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Toast for notifications -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050">
    <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Notification</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage">
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showToast(message, isSuccess = true) {
            const toastElement = document.getElementById('notificationToast');
            const toastMessage = document.getElementById('toastMessage');
            const toastHeader = toastElement.querySelector('.toast-header');
            
            toastMessage.textContent = message;
            
            // Remove existing classes and add appropriate color
            toastHeader.classList.remove('bg-success', 'bg-danger', 'text-white');
            if (isSuccess) {
                toastHeader.classList.add('bg-success', 'text-white');
            } else {
                toastHeader.classList.add('bg-danger', 'text-white');
            }
            
            const toast = new bootstrap.Toast(toastElement);
            toast.show();
        }

        function approvePost(postId) {
            if (confirm('Are you sure you want to approve this post?')) {
                fetch('@Url.Action("ApprovePost", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: postId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, true);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        showToast(data.message, false);
                    }
                })
                .catch(error => {
                    showToast('An error occurred. Please try again.', false);
                });
            }
        }

        function rejectPost(postId) {
            if (confirm('Are you sure you want to reject this post? This action cannot be undone.')) {
                fetch('@Url.Action("RejectPost", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: postId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(data.message, true);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        showToast(data.message, false);
                    }
                })
                .catch(error => {
                    showToast('An error occurred. Please try again.', false);
                });
            }
        }
    </script>
}

@Html.AntiForgeryToken()